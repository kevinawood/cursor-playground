name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_rss_reader
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd projects/rss-reader/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_rss_reader
      run: |
        cd projects/rss-reader/backend
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./projects/rss-reader/backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: projects/rss-reader/frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd projects/rss-reader/frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd projects/rss-reader/frontend
        npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./projects/rss-reader/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: rss_user
          POSTGRES_PASSWORD: rss_password
          POSTGRES_DB: rss_reader
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: projects/rss-reader/frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd projects/rss-reader/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd projects/rss-reader/frontend
        npm ci
    
    - name: Start backend server
      env:
        DATABASE_URL: postgresql://rss_user:rss_password@localhost:5432/rss_reader
      run: |
        cd projects/rss-reader/backend
        python app.py &
        sleep 10
    
    - name: Start frontend server
      run: |
        cd projects/rss-reader/frontend
        npm run dev &
        sleep 10
    
    - name: Run E2E tests
      run: |
        cd projects/rss-reader/frontend
        npm run test:e2e
    
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: projects/rss-reader/frontend/cypress/screenshots
        if-no-files-found: ignore
    
    - name: Upload videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: projects/rss-reader/frontend/cypress/videos
        if-no-files-found: ignore 